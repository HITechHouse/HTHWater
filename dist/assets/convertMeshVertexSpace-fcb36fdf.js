import{y as p,b as m,$ as s}from"./index-ee1133ea.js";import{p as n}from"./MeshVertexAttributes-c8dc5b24.js";import{B as a}from"./vertexSpaceConversion-04dc2d09.js";import"./meshProperties-01219fec.js";import"./mat3f64-e19cdcb8.js";import"./mat4f64-7b47076d.js";import"./spatialReferenceEllipsoidUtils-fef0e593.js";import"./computeTranslationToOriginAndRotation-d98e4d1f.js";import"./projectPointToVector-5ad9f65f.js";import"./meshVertexSpaceUtils-6f0c1303.js";import"./MeshLocalVertexSpace-1625db68.js";import"./vec3-eed24f88.js";import"./BufferView-ecc75b84.js";import"./vec4-8f193cb6.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
