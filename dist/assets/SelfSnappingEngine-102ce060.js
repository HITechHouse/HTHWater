import{cK as U,mt as G,mu as W,mv as H,N as F,iB as b,gh as N,gc as z,mw as X,mx as Y,my as Z,hL as ee,en as te,eD as se,mz as ie,dj as re,a6 as ne,J as L,K as q,W as oe}from"./index-ee1133ea.js";import{f as A,o as J}from"./quantityUtils-3c2d70a5.js";import{j as x}from"./elevationInfoUtils-98119119.js";import{p as P,N as f,u as y,s as p,o as $,b as C,n as K,q as R,M as B,J as he,r as ae,I as M,e as I,j as de,t as le,i as ce,E as pe}from"./hitTestSelectUtils-03a3bc2d.js";import{s as m,r as ge,g as fe,p as S,d as ue,o as xe,h as me}from"./RouteLayerInteraction-e8adac2a.js";import{u as Q}from"./geodesicLengthMeasurementUtils-91c0be2d.js";import"./projectVectorToVector-fd141889.js";import"./projectPointToVector-5ad9f65f.js";import"./geodesicUtils-c5762ecc.js";import"./plane-867b9076.js";import"./mat3f64-e19cdcb8.js";import"./mat4f64-7b47076d.js";import"./quatf64-216ddd5a.js";import"./sphere-dcf2e830.js";import"./GraphicsLayer-74e5f798.js";import"./Stop-60ecd8dc.js";import"./networkEnums-5ea16285.js";import"./geometryEngine-839f5f22.js";import"./geometryEngineBase-58446043.js";import"./_commonjsHelpers-2f3e7994.js";import"./hydrated-cdeb9f7c.js";class k{constructor(s,e){this.view=s,this.options=e,this.squaredShortLineThreshold=P.shortLineThreshold*P.shortLineThreshold}snap(s,e){return e.vertexHandle!=null?e.vertexHandle.type!=="vertex"?[]:this.snapExistingVertex(s,e):this.snapNewVertex(s,e)}edgeExceedsShortLineThreshold(s,e){return this.exceedsShortLineThreshold(f(s.leftVertex.pos,this.view,e),f(s.rightVertex.pos,this.view,e),e)}exceedsShortLineThreshold(s,e,{spatialReference:t}){return this.squaredShortLineThreshold===0||y(m(e,t,x,this.view),m(s,t,x,this.view))>this.squaredShortLineThreshold}isVertical(s,e,{spatialReference:t}){const i=U(t);return G(p(s),p(e))*i<P.verticalLineThresholdMeters}squaredProximityThreshold(s){return s==="touch"?this._squaredTouchProximityThreshold:this._squaredMouseProximityThreshold}get _squaredMouseProximityThreshold(){return this.options.distance*this.options.distance}get _squaredTouchProximityThreshold(){const{distance:s,touchSensitivityMultiplier:e}=this.options,t=s*e;return t*t}}class ve extends k{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=[];if(i<1)return r;const{spatialReference:n}=e,h=m(s,n,x,this.view),{view:o}=this,a=t.edges[i-1];let d=a;do{if(this.edgeExceedsShortLineThreshold(d,e)){const g=$(d,o,e);this._processCandidateProposal(g.left,g.right,s,h,e,r)}d=d.leftVertex.leftEdge}while(d&&d!==a);return r}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2)return t;const{view:n}=this,{spatialReference:h}=e,o=m(s,h,x,n),a=i.leftEdge,d=i.rightEdge;a&&d&&this.edgeExceedsShortLineThreshold(a,e)&&this.edgeExceedsShortLineThreshold(d,e)&&this._processCandidateProposal(f(a.leftVertex.pos,n,e),f(d.rightVertex.pos,n,e),s,o,e,t);const g=r.edges[0];let c=g;do{if(c!==i.leftEdge&&c!==i.rightEdge&&this.edgeExceedsShortLineThreshold(c,e)){const u=$(c,n,e);this._processCandidateProposal(u.left,u.right,s,o,e,t)}c=c.rightVertex.rightEdge}while(c&&c!==g);return t}_processCandidateProposal(s,e,t,i,r,n){var g;const{spatialReference:h,pointer:o}=r,a=F();Ee(a,s,e,t,r);const d=C(K(a));y(i,m(d,h,x,this.view))<this.squaredProximityThreshold(o)&&n.push(new ge({lineStart:s,lineEnd:e,targetPoint:d,isDraped:((g=r.elevationInfo)==null?void 0:g.mode)==="on-the-ground"}))}}function Ee(l,s,e,t,i){we(l,s,e,t,i)||Ve(l,t,s,e)}function we(l,s,e,t,{spatialReference:i}){const r=R(s,e,i,i);if(r==null)return!1;const n=R(e,t,i,i);if(n==null)return!1;const h=Q(e,t,i);if(h==null)return!1;const o=Math.abs(W.shortestSignedDiff(r,n))>Math.PI/2?H.normalize(r+Math.PI):r;return B(l,e,i,A(h,"meters"),J(o,"radians","geographic"),"geodesic"),l[2]=t[2],!0}function Ve(l,s,e,t){he(s,{start:e,end:t,type:ae.LINE},l),l[2]=s[2]}let Pe=class extends k{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=t.vertices.length,n=[];if(i<2)return n;const{view:h}=this,o=m(s,e.spatialReference,x,h),a=f(t.vertices[r-1].pos,h,e),d=f(t.vertices[0].pos,h,e),g=t.edges[i-1];let c=g;do{if(this.edgeExceedsShortLineThreshold(c,e)){const u=$(c,h,e);this._checkEdgeForParallelLines(u,a,s,o,e,n),this._checkEdgeForParallelLines(u,d,s,o,e,n)}c=c.leftVertex.leftEdge}while(c&&c!==g);return n}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<3)return t;const{view:n}=this,h=m(s,e.spatialReference,x,n),o=i.leftEdge,a=i.rightEdge,d=r.vertices[0],g=f(d.pos,n,e),c=r.vertices.length,u=r.vertices[c-1],w=f(u.pos,n,e),_=r.edges[0];let v=_;do{if(v!==o&&v!==a&&this.edgeExceedsShortLineThreshold(v,e)){const T=$(v,n,e);o&&this._checkEdgeForParallelLines(T,f(o.leftVertex.pos,n,e),s,h,e,t),a&&this._checkEdgeForParallelLines(T,f(a.rightVertex.pos,n,e),s,h,e,t),i===d?this._checkEdgeForParallelLines(T,w,s,h,e,t):i===u&&this._checkEdgeForParallelLines(T,g,s,h,e,t)}v=v.rightVertex.rightEdge}while(v&&v!==_);return t}_checkEdgeForParallelLines(s,e,t,i,r,n){var c;const h=s.left,o=s.right;if(M(E,p(e),p(h),p(o)),b(E,p(e))<P.parallelLineThreshold)return;M(E,p(t),p(h),p(o),p(e));const{spatialReference:a,pointer:d}=r,g=C(I(E[0],E[1],t[2]));if(y(i,m(g,a,x,this.view))<this.squaredProximityThreshold(d)){if(this.isVertical(g,e,r)||this.isVertical(h,o,r)||ye(s,n))return;n.push(new fe({referenceLine:s,lineStart:e,targetPoint:g,isDraped:((c=r.elevationInfo)==null?void 0:c.mode)==="on-the-ground"}))}}};function ye(l,s){const e=l.left,t=l.right;for(const i of s)if(M(E,p(t),p(i.constraint.start),p(i.constraint.end),p(e)),b(E,p(t))<P.parallelLineThreshold)return i.addReferenceLine(l),!0;return!1}const E=N();class _e extends k{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[];if(t.vertices.length<2)return i;const{view:r}=this,n=m(s,e.spatialReference,x,r),h=t.vertices.at(-1);this._checkForSnappingCandidate(S.LastVertex,i,h.leftEdge,h,h.leftEdge.leftVertex,s,n,e);const o=t.vertices[0];return this._checkForSnappingCandidate(S.FirstVertex,i,o.rightEdge,o,o.rightEdge.rightVertex,s,n,e),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle;if(i.component.vertices.length<3)return t;const{view:r}=this,n=m(s,e.spatialReference,x,r),h=i.leftEdge,o=i.rightEdge;if(h!=null&&h.leftVertex.leftEdge){const a=h.leftVertex.leftEdge;this._checkForSnappingCandidate(S.ExistingEdge,t,a,a.rightVertex,a.leftVertex,s,n,e)}if(o!=null&&o.rightVertex.rightEdge){const a=o.rightVertex.rightEdge;this._checkForSnappingCandidate(S.ExistingEdge,t,a,a.leftVertex,a.rightVertex,s,n,e)}return t}_checkForSnappingCandidate(s,e,t,i,r,n,h,o){if(!this.edgeExceedsShortLineThreshold(t,o))return;const a=this.view,d=f(i.pos,a,o),g=f(r.pos,a,o);Te(O,g,d,n,o),this._checkForSnappingCandidateAlongProjectedRay(s,e,g,d,O,n,h,o)}_checkForSnappingCandidateAlongProjectedRay(s,e,t,i,r,n,h,o){var v;const{spatialReference:a,pointer:d}=o,g=z(j,p(n),p(i)),c=X(r,g)/Y(r),u=Z(j,p(i),r,c),w=C(I(u[0],u[1],n[2]));if(y(h,m(w,a,x,this.view))>this.squaredProximityThreshold(d)||this.isVertical(w,i,o)||this.isVertical(i,t,o))return;const _=ee(F(),i,r,Math.sign(c));e.push(new ue({targetPoint:w,constraint:new de(i,K(_)),previousVertex:t,otherVertex:i,otherVertexType:xe.CENTER,selfSnappingType:s,isDraped:((v=o.elevationInfo)==null?void 0:v.mode)==="on-the-ground"}))}}function Te(l,s,e,t,i){Le(l,s,e,t,i)||Se(l,s,e)}function Le(l,s,e,t,{spatialReference:i}){const r=R(s,e,i,i);if(r==null)return!1;const n=R(e,t,i,i);if(n==null)return!1;const h=Math.sign(H.shortestSignedDiff(r,n))*Math.PI*.5,o=J(r+h,"radians","geographic"),a=F(),d=Q(e,t,i);return d!=null&&(B(a,e,i,A(d,"meters"),o,"geodesic"),te(l,a,e),!0)}function Se(l,s,e){const t=z(j,p(e),p(s));se(l,t[1],-t[0],0)}const j=N(),O=F();let $e=class extends k{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[],r=t.vertices.length;if(e.editGeometryOperations.data.type!=="polygon"||r<2)return i;const{view:n}=this,h=t.vertices[0],o=t.vertices[r-1],a=f(h.pos,n,e),d=f(o.pos,n,e);return this._processCandidateProposal(a,d,s,e,i),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2||e.editGeometryOperations.data.type==="polyline"&&(i.index===0||i.index===r.vertices.length-1))return t;const{view:n}=this,h=f(i.leftEdge.leftVertex.pos,n,e),o=f(i.rightEdge.rightVertex.pos,n,e);return this._processCandidateProposal(h,o,s,e,t),t}_processCandidateProposal(s,e,t,i,r){var u;if(!this.exceedsShortLineThreshold(s,e,i))return;const n=ie(D,p(s),p(e),.5),h=.5*G(p(s),p(e)),o=le(D,p(t),n,h),a=C(I(o[0],o[1],t[2])),{spatialReference:d,pointer:g}=i,c=m(t,d,x,this.view);if(y(c,m(a,d,x,this.view))<this.squaredProximityThreshold(g)){if(this.isVertical(s,a,i)||this.isVertical(a,e,i))return;r.push(new me({targetPoint:a,point1:s,point2:e,isDraped:((u=i.elevationInfo)==null?void 0:u.mode)==="on-the-ground"}))}}};const D=N();let V=class extends re{constructor(l){super(l),this.updating=!1,this._snappers=new ne,this._domain=ce.SELF}initialize(){this._snappers.push(new Pe(this.view,this.options),new ve(this.view,this.options),new _e(this.view,this.options),new $e(this.view,this.options))}set options(l){this._set("options",l);for(const s of this._snappers)s.options=l}async fetchCandidates(l,s,e){if(!(s&this._domain&&this.options.effectiveSelfEnabled))return[];const t=[];for(const i of this._snappers.items)for(const r of i.snap(l,e))t.push(r);return pe(l,t),t}};L([q({readOnly:!0})],V.prototype,"updating",void 0),L([q({constructOnly:!0})],V.prototype,"view",void 0),L([q()],V.prototype,"options",null),V=L([oe("esri.views.interactive.snapping.SelfSnappingEngine")],V);export{V as SelfSnappingEngine};
