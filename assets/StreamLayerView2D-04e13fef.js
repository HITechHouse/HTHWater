import{J as s,K as o,hj as _,W as l,cA as m,b as h,hh as g,bN as f,B as d,eu as v}from"./index-f5157718.js";import{n as S,d as C}from"./FeatureLayerView2D-2fb8d326.js";import"./featureConversionUtils-c3e620ab.js";import"./OptimizedFeature-6e8489c3.js";import"./memoryEstimations-e8cfae6e.js";import"./OptimizedGeometry-4a66a431.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./timeSupport-5dfb8a2f.js";import"./AttributeBinsFeatureSet-8e96a3d9.js";import"./AttributeBinsQuery-766a2411.js";import"./queryUtils-d1b9b043.js";import"./json-48e3ea08.js";import"./FixedIntervalBinParameters-16f91595.js";import"./LayerView-ebae4ed5.js";import"./Container-18064324.js";import"./layerViewUtils-56caa9ba.js";import"./TechniqueInstance-0840be2c.js";import"./UpdateTracking2D-48735ec0.js";import"./Utils-db5b9715.js";import"./BoundingBox-dc5b3050.js";import"./VertexElementDescriptor-2925c6af.js";import"./FramebufferObject-a125841d.js";import"./VertexArrayObject-95d73b2d.js";import"./TileContainer-e1929e71.js";import"./WGLContainer-81d2cb88.js";import"./ProgramTemplate-94f4a844.js";import"./vec3f32-ad1dc57f.js";import"./StyleDefinition-d2ee7f7c.js";import"./config-1337d16e.js";import"./earcut-5a6c70eb.js";import"./FeatureCommandQueue-c3e353de.js";import"./CIMSymbolHelper-a4ca21cf.js";import"./BidiEngine-664145a5.js";import"./fontUtils-169c9d42.js";import"./GeometryUtils-e2c839d5.js";import"./rasterizingUtils-04255511.js";import"./floatRGBA-d388c598.js";import"./Rect-ea14f53a.js";import"./TechniqueType-75b634fe.js";import"./GraphShaderModule-7229a56f.js";import"./ShaderBuilder-7a2c64b1.js";import"./BindType-0376b293.js";import"./streamLayerUtils-649b6193.js";import"./QueueProcessor-faf2f495.js";import"./CircularArray-50add9d1.js";import"./SDFHelper-05ff1354.js";import"./constants-304feb1c.js";import"./parquet-6bc9e364.js";import"./popupUtils-284072a8.js";import"./RefreshableLayerView-ad997cdf.js";const P=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([o()],t.prototype,"_isUserPaused",void 0),s([o({readOnly:!0})],t.prototype,"connectionStatus",null),s([o({type:_})],t.prototype,"filter",void 0),t=s([l("esri.views.layers.StreamLayerView")],t),t};let n=class extends P(C){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),m(()=>this.layer.purgeOptions,()=>this._update()),m(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new h("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return g(e.map(i=>this.on(i,t)));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then(i=>i.streamMessenger.enableEvent(e,!0));const p=super.on(e,t),a=this;return f(()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then(i=>i.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){var p,a,i;if(!((p=this.layer.timeInfo)!=null&&p.endField||(a=this.layer.timeInfo)!=null&&a.startField||(i=this.layer.timeInfo)!=null&&i.trackIdField))throw new h("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return S(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(y=>{const u=d.fromJSON(y);return u.features.forEach(c=>{c.layer=this.layer,c.sourceLayer=this.layer}),u}),new d({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(v)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([o()],n.prototype,"pipelineConnectionStatus",void 0),s([o()],n.prototype,"pipelineErrorString",void 0),s([o({readOnly:!0})],n.prototype,"connectionError",null),s([o({readOnly:!0})],n.prototype,"_streamConnectionStatus",null),n=s([l("esri.views.2d.layers.StreamLayerView2D")],n);const ve=n;export{ve as default};
