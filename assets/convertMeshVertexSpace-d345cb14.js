import{y as p,b as m,$ as s}from"./index-f5157718.js";import{p as n}from"./MeshVertexAttributes-ec7c877d.js";import{B as a}from"./vertexSpaceConversion-a98124bf.js";import"./meshProperties-01219fec.js";import"./mat3f64-e19cdcb8.js";import"./mat4f64-7b47076d.js";import"./spatialReferenceEllipsoidUtils-53921753.js";import"./computeTranslationToOriginAndRotation-44aba095.js";import"./projectPointToVector-417832fa.js";import"./meshVertexSpaceUtils-17de56f2.js";import"./MeshLocalVertexSpace-205953f5.js";import"./vec3-fb0321b6.js";import"./BufferView-5d617a3a.js";import"./vec4-35b317ed.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
